
public bool ReadResponseAsString { get; set; } = true;

protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
{
    if (response == null || response.Content == null)
    {
{%- if GenerateNullableReferenceTypes -%}
        return new ObjectResponseResult<T>(default(T)!, string.Empty);
{%- else -%}
        return new ObjectResponseResult<T>(default(T), string.Empty);
{%- endif -%}
    }

    if (ReadResponseAsString)
    {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        responseText = ConvertUrlFormToJson(responseText);
        try
        {
            var typedBody = {% if UseSystemTextJson %}System.Text.Json.JsonSerializer.Deserialize{% else %}Newtonsoft.Json.JsonConvert.DeserializeObject{% endif %}<T>(responseText, {% if UseRequestAndResponseSerializationSettings %}Response{% endif %}JsonSerializerSettings);
{%- if GenerateNullableReferenceTypes -%}
            return new ObjectResponseResult<T>(typedBody!, responseText);
{%- else -%}
            return new ObjectResponseResult<T>(typedBody, responseText);
{%- endif -%}
        }
        catch ({% if UseSystemTextJson %}System.Text.Json.JsonException{% else %}Newtonsoft.Json.JsonException{% endif %} exception)
        {
            var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
            throw new {{ ExceptionClass }}(message, (int)response.StatusCode, responseText, headers, exception);
        }
    }
    else
    {
        try
        {
            using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
{%- if UseSystemTextJson -%}
            {
                var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, {% if UseRequestAndResponseSerializationSettings %}Response{% endif %}JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
{%- else -%}
            using (var streamReader = new System.IO.StreamReader(responseStream))
            using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
            {
                var serializer = Newtonsoft.Json.JsonSerializer.Create({% if UseRequestAndResponseSerializationSettings %}Response{% endif %}JsonSerializerSettings);
                var typedBody = serializer.Deserialize<T>(jsonTextReader);
{%- endif -%}
{%- if GenerateNullableReferenceTypes -%}
                return new ObjectResponseResult<T>(typedBody!, string.Empty);
{%- else -%}
                return new ObjectResponseResult<T>(typedBody, string.Empty);
{%- endif -%}
            }
        }
        catch ({% if UseSystemTextJson %}System.Text.Json.JsonException{% else %}Newtonsoft.Json.JsonException{% endif %} exception)
        {
            var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
            throw new {{ ExceptionClass }}(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
    }
}

private string ConvertUrlFormToJson(string input)
{

    if (input.Contains("<?xml version=\"1.0\""))
    {

        var xmlDoc = new System.Xml.XmlDocument();
        xmlDoc.LoadXml(input);

        var jsonCompatible = ConvertToDictionary(xmlDoc.DocumentElement);

        // Serialize Dictionary to JSON
        string json = System.Text.Json.JsonSerializer.Serialize(jsonCompatible, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        return json;
                 
    }
    else
    {
        // Parse the response into a collection using HttpUtility
        var queryParams = System.Web.HttpUtility.ParseQueryString(input);

        // Create a dictionary to hold the parsed values
        var dictionary = new System.Collections.Generic.Dictionary<string, string>();
        foreach (string key in queryParams.Keys)
        {
            dictionary[key] = queryParams[key];
        } 
        return System.Text.Json.JsonSerializer.Serialize(dictionary);
    }
           
}
static object ConvertToDictionary(System.Xml.XmlNode node)
{
   if (node.ChildNodes.Count == 1 && node.FirstChild is System.Xml.XmlText)
   {
        string textValue = node.InnerText;

        // Handle numeric and boolean conversion
        if (long.TryParse(textValue, out long numericValue))
        {
            return numericValue; // Return as a number
        }
        if (bool.TryParse(textValue, out bool boolValue))
        {
            return boolValue; // Return as a boolean
        }

        // Return as a string if not empty, return null otherwise
        return string.IsNullOrWhiteSpace(textValue) ? null : textValue; 
    }
    else
    {
        // Build dictionary for child nodes
        var dict = new System.Collections.Generic.Dictionary<string, object>();

        foreach (System.Xml.XmlNode child in node.ChildNodes)
        {
            var childValue = ConvertToDictionary(child);

            // Exclude this child if it's null or empty
            if (childValue != null)
            {
                if (!dict.ContainsKey(child.Name))
                {
                    dict[child.Name] = new System.Collections.Generic.List<object>();
                }

                var list = dict[child.Name] as System.Collections.Generic.List<object>;
                list.Add(childValue);
            }
        }

        // Simplify single-element lists to just the element
        foreach (var key in dict.Keys)
        {
            var list = dict[key] as System.Collections.Generic.List<object>;
            if (list.Count == 1)
            {
                dict[key] = list[0];
            }
        }

        // Return null if all children were removed (empty node)
        return dict.Count > 0 ? dict : null;
    }
}